// Code generated by "enumer -type=Currency -json -sql -transform=snake-upper"; DO NOT EDIT.

package enum

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strings"
)

const _CurrencyName = "USDEURJPYCHFCNYGBPAUDCADNZD"

var _CurrencyIndex = [...]uint8{0, 3, 6, 9, 12, 15, 18, 21, 24, 27}

const _CurrencyLowerName = "usdeurjpychfcnygbpaudcadnzd"

func (i Currency) String() string {
	i -= 1
	if i < 0 || i >= Currency(len(_CurrencyIndex)-1) {
		return fmt.Sprintf("Currency(%d)", i+1)
	}
	return _CurrencyName[_CurrencyIndex[i]:_CurrencyIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _CurrencyNoOp() {
	var x [1]struct{}
	_ = x[USD-(1)]
	_ = x[EUR-(2)]
	_ = x[JPY-(3)]
	_ = x[CHF-(4)]
	_ = x[CNY-(5)]
	_ = x[GBP-(6)]
	_ = x[AUD-(7)]
	_ = x[CAD-(8)]
	_ = x[NZD-(9)]
}

var _CurrencyValues = []Currency{USD, EUR, JPY, CHF, CNY, GBP, AUD, CAD, NZD}

var _CurrencyNameToValueMap = map[string]Currency{
	_CurrencyName[0:3]:        USD,
	_CurrencyLowerName[0:3]:   USD,
	_CurrencyName[3:6]:        EUR,
	_CurrencyLowerName[3:6]:   EUR,
	_CurrencyName[6:9]:        JPY,
	_CurrencyLowerName[6:9]:   JPY,
	_CurrencyName[9:12]:       CHF,
	_CurrencyLowerName[9:12]:  CHF,
	_CurrencyName[12:15]:      CNY,
	_CurrencyLowerName[12:15]: CNY,
	_CurrencyName[15:18]:      GBP,
	_CurrencyLowerName[15:18]: GBP,
	_CurrencyName[18:21]:      AUD,
	_CurrencyLowerName[18:21]: AUD,
	_CurrencyName[21:24]:      CAD,
	_CurrencyLowerName[21:24]: CAD,
	_CurrencyName[24:27]:      NZD,
	_CurrencyLowerName[24:27]: NZD,
}

var _CurrencyNames = []string{
	_CurrencyName[0:3],
	_CurrencyName[3:6],
	_CurrencyName[6:9],
	_CurrencyName[9:12],
	_CurrencyName[12:15],
	_CurrencyName[15:18],
	_CurrencyName[18:21],
	_CurrencyName[21:24],
	_CurrencyName[24:27],
}

// CurrencyString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func CurrencyString(s string) (Currency, error) {
	if val, ok := _CurrencyNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _CurrencyNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Currency values", s)
}

// CurrencyValues returns all values of the enum
func CurrencyValues() []Currency {
	return _CurrencyValues
}

// CurrencyStrings returns a slice of all String values of the enum
func CurrencyStrings() []string {
	strs := make([]string, len(_CurrencyNames))
	copy(strs, _CurrencyNames)
	return strs
}

// IsACurrency returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Currency) IsACurrency() bool {
	for _, v := range _CurrencyValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Currency
func (i Currency) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Currency
func (i *Currency) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Currency should be a string, got %s", data)
	}

	var err error
	*i, err = CurrencyString(s)
	return err
}

func (i Currency) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *Currency) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of Currency: %[1]T(%[1]v)", value)
	}

	val, err := CurrencyString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
