// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: account.sql

package db

import (
	"context"

	"e-wallet-app/modules/account/accountenum"
	"github.com/shopspring/decimal"
)

const addAccountBalance = `-- name: AddAccountBalance :one
UPDATE accounts
SET balance = balance + $1
WHERE id = $2
RETURNING id, user_id, status, balance, account_type, created_at, updated_at
`

type AddAccountBalanceParams struct {
	Amount decimal.Decimal `json:"amount"`
	ID     int64           `json:"id"`
}

func (q *Queries) AddAccountBalance(ctx context.Context, arg AddAccountBalanceParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, addAccountBalance, arg.Amount, arg.ID)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Status,
		&i.Balance,
		&i.AccountType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const countAccounts = `-- name: CountAccounts :one
SELECT count(*)
FROM accounts
`

func (q *Queries) CountAccounts(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countAccounts)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countAccountsByAccountType = `-- name: CountAccountsByAccountType :one
SELECT count(*)
FROM accounts
WHERE account_type = $1
`

func (q *Queries) CountAccountsByAccountType(ctx context.Context, accountType accountenum.AccountType) (int64, error) {
	row := q.db.QueryRowContext(ctx, countAccountsByAccountType, accountType)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts (user_id,
                      balance,
                      account_type)
VALUES ($1, $2, $3)
RETURNING id, user_id, status, balance, account_type, created_at, updated_at
`

type CreateAccountParams struct {
	UserID      int64                   `json:"user_id"`
	Balance     decimal.Decimal         `json:"balance"`
	AccountType accountenum.AccountType `json:"account_type"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, createAccount, arg.UserID, arg.Balance, arg.AccountType)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Status,
		&i.Balance,
		&i.AccountType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAccount = `-- name: GetAccount :one
SELECT id, user_id, status, balance, account_type, created_at, updated_at
FROM accounts
WHERE id = $1
`

func (q *Queries) GetAccount(ctx context.Context, id int64) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccount, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Status,
		&i.Balance,
		&i.AccountType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAccountForUpdate = `-- name: GetAccountForUpdate :one
SELECT id, user_id, status, balance, account_type, created_at, updated_at
FROM accounts
WHERE id = $1
    FOR NO KEY UPDATE
`

func (q *Queries) GetAccountForUpdate(ctx context.Context, id int64) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccountForUpdate, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Status,
		&i.Balance,
		&i.AccountType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listAccounts = `-- name: ListAccounts :many
SELECT id, user_id, status, balance, account_type, created_at, updated_at
FROM accounts
ORDER BY id
LIMIT $1 OFFSET $2
`

type ListAccountsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListAccounts(ctx context.Context, arg ListAccountsParams) ([]Account, error) {
	rows, err := q.db.QueryContext(ctx, listAccounts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Account{}
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Status,
			&i.Balance,
			&i.AccountType,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAccountsByAccountType = `-- name: ListAccountsByAccountType :many
SELECT id, user_id, status, balance, account_type, created_at, updated_at
FROM accounts
WHERE account_type = $1
ORDER BY id
LIMIT $2 OFFSET $3
`

type ListAccountsByAccountTypeParams struct {
	AccountType accountenum.AccountType `json:"account_type"`
	Limit       int32                   `json:"limit"`
	Offset      int32                   `json:"offset"`
}

func (q *Queries) ListAccountsByAccountType(ctx context.Context, arg ListAccountsByAccountTypeParams) ([]Account, error) {
	rows, err := q.db.QueryContext(ctx, listAccountsByAccountType, arg.AccountType, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Account{}
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Status,
			&i.Balance,
			&i.AccountType,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAccountsByUser = `-- name: ListAccountsByUser :many
SELECT id, user_id, status, balance, account_type, created_at, updated_at
FROM accounts
WHERE user_id = $1
`

func (q *Queries) ListAccountsByUser(ctx context.Context, userID int64) ([]Account, error) {
	rows, err := q.db.QueryContext(ctx, listAccountsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Account{}
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Status,
			&i.Balance,
			&i.AccountType,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccountStatus = `-- name: UpdateAccountStatus :one
UPDATE accounts
SET status = $2
WHERE id = $1
RETURNING id, user_id, status, balance, account_type, created_at, updated_at
`

type UpdateAccountStatusParams struct {
	ID     int64 `json:"id"`
	Status bool  `json:"status"`
}

func (q *Queries) UpdateAccountStatus(ctx context.Context, arg UpdateAccountStatusParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, updateAccountStatus, arg.ID, arg.Status)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Status,
		&i.Balance,
		&i.AccountType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateAccountType = `-- name: UpdateAccountType :one
UPDATE accounts
SET account_type = $2
WHERE id = $1
RETURNING id, user_id, status, balance, account_type, created_at, updated_at
`

type UpdateAccountTypeParams struct {
	ID          int64                   `json:"id"`
	AccountType accountenum.AccountType `json:"account_type"`
}

func (q *Queries) UpdateAccountType(ctx context.Context, arg UpdateAccountTypeParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, updateAccountType, arg.ID, arg.AccountType)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Status,
		&i.Balance,
		&i.AccountType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
