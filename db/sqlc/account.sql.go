// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: account.sql

package db

import (
	"context"
	"database/sql"

	"e-wallet-app/modules/account/accountenum"
	"github.com/shopspring/decimal"
)

const addAccountBalanceByAccountNumber = `-- name: AddAccountBalanceByAccountNumber :one
UPDATE accounts
SET balance = balance + $2,
updated_at = now()
WHERE account_number = $1
RETURNING id, username, account_number, status, balance, account_type, created_at, updated_at
`

type AddAccountBalanceByAccountNumberParams struct {
	AccountNumber string           `json:"account_number"`
	Amount        *decimal.Decimal `json:"amount"`
}

func (q *Queries) AddAccountBalanceByAccountNumber(ctx context.Context, arg AddAccountBalanceByAccountNumberParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, addAccountBalanceByAccountNumber, arg.AccountNumber, arg.Amount)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.AccountNumber,
		&i.Status,
		&i.Balance,
		&i.AccountType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const countAccounts = `-- name: CountAccounts :one
SELECT count(*)
FROM accounts
WHERE
username = coalesce($1, username)
AND account_type = coalesce($2, account_type)
AND status = coalesce($3, status)
`

type CountAccountsParams struct {
	Username    sql.NullString           `json:"username"`
	AccountType *accountenum.AccountType `json:"account_type"`
	Status      sql.NullBool             `json:"status"`
}

func (q *Queries) CountAccounts(ctx context.Context, arg CountAccountsParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, countAccounts, arg.Username, arg.AccountType, arg.Status)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts (username,
balance,
account_type,
account_number) VALUES
($1, $2, $3, $4)
RETURNING id, username, account_number, status, balance, account_type, created_at, updated_at
`

type CreateAccountParams struct {
	Username      string                   `json:"username"`
	Balance       *decimal.Decimal         `json:"balance"`
	AccountType   *accountenum.AccountType `json:"account_type"`
	AccountNumber string                   `json:"account_number"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, createAccount,
		arg.Username,
		arg.Balance,
		arg.AccountType,
		arg.AccountNumber,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.AccountNumber,
		&i.Status,
		&i.Balance,
		&i.AccountType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAccountByAccountNumber = `-- name: GetAccountByAccountNumber :one
SELECT id, username, account_number, status, balance, account_type, created_at, updated_at
FROM accounts
WHERE account_number = $1
`

func (q *Queries) GetAccountByAccountNumber(ctx context.Context, accountNumber string) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccountByAccountNumber, accountNumber)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.AccountNumber,
		&i.Status,
		&i.Balance,
		&i.AccountType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listAccounts = `-- name: ListAccounts :many
SELECT id, username, account_number, status, balance, account_type, created_at, updated_at
FROM accounts
WHERE
username = coalesce($3, username)
AND account_type = coalesce($4, account_type)
AND status = coalesce($5, status)
ORDER BY
(case when $6 = 'id' and $7 = 'ASC' then id end),
(case when $6 = 'id' and $7 = 'DESC' then id end) desc
LIMIT $1
OFFSET $2
`

type ListAccountsParams struct {
	Limit         int32                    `json:"limit"`
	Offset        int32                    `json:"offset"`
	Username      sql.NullString           `json:"username"`
	AccountType   *accountenum.AccountType `json:"account_type"`
	Status        sql.NullBool             `json:"status"`
	SortColumn    interface{}              `json:"sort_column"`
	SortDirection interface{}              `json:"sort_direction"`
}

func (q *Queries) ListAccounts(ctx context.Context, arg ListAccountsParams) ([]Account, error) {
	rows, err := q.db.QueryContext(ctx, listAccounts,
		arg.Limit,
		arg.Offset,
		arg.Username,
		arg.AccountType,
		arg.Status,
		arg.SortColumn,
		arg.SortDirection,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Account{}
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.AccountNumber,
			&i.Status,
			&i.Balance,
			&i.AccountType,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccount = `-- name: UpdateAccount :one
UPDATE accounts
SET
status = coalesce($1, status),
account_type = coalesce($2, account_type),
updated_at = now()
WHERE account_number = $3
RETURNING id, username, account_number, status, balance, account_type, created_at, updated_at
`

type UpdateAccountParams struct {
	Status        sql.NullBool             `json:"status"`
	AccountType   *accountenum.AccountType `json:"account_type"`
	AccountNumber string                   `json:"account_number"`
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, updateAccount, arg.Status, arg.AccountType, arg.AccountNumber)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.AccountNumber,
		&i.Status,
		&i.Balance,
		&i.AccountType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
