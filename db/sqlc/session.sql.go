// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: session.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (
username,
refresh_token_uuid,
refresh_token,
user_agent,
client_ip,
expires_at)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, username, refresh_token_uuid, refresh_token, user_agent, client_ip, status, expires_at, created_at, updated_at
`

type CreateSessionParams struct {
	Username         string    `json:"username"`
	RefreshTokenUuid uuid.UUID `json:"refresh_token_uuid"`
	RefreshToken     string    `json:"refresh_token"`
	UserAgent        string    `json:"user_agent"`
	ClientIp         string    `json:"client_ip"`
	ExpiresAt        time.Time `json:"expires_at"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, createSession,
		arg.Username,
		arg.RefreshTokenUuid,
		arg.RefreshToken,
		arg.UserAgent,
		arg.ClientIp,
		arg.ExpiresAt,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.RefreshTokenUuid,
		&i.RefreshToken,
		&i.UserAgent,
		&i.ClientIp,
		&i.Status,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getActiveSession = `-- name: GetActiveSession :one
SELECT id, username, refresh_token_uuid, refresh_token, user_agent, client_ip, status, expires_at, created_at, updated_at FROM sessions
WHERE
refresh_token_uuid = coalesce($1, refresh_token_uuid)
AND refresh_token = coalesce($2, refresh_token)
AND username = coalesce($3, username)
AND client_ip = coalesce($4, client_ip)
AND user_agent = coalesce($5, user_agent)
AND status = true
`

type GetActiveSessionParams struct {
	RefreshTokenUuid uuid.NullUUID  `json:"refresh_token_uuid"`
	RefreshToken     sql.NullString `json:"refresh_token"`
	Username         sql.NullString `json:"username"`
	ClientIp         sql.NullString `json:"client_ip"`
	UserAgent        sql.NullString `json:"user_agent"`
}

func (q *Queries) GetActiveSession(ctx context.Context, arg GetActiveSessionParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, getActiveSession,
		arg.RefreshTokenUuid,
		arg.RefreshToken,
		arg.Username,
		arg.ClientIp,
		arg.UserAgent,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.RefreshTokenUuid,
		&i.RefreshToken,
		&i.UserAgent,
		&i.ClientIp,
		&i.Status,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
