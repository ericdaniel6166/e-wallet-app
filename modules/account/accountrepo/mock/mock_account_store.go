// Code generated by MockGen. DO NOT EDIT.
// Source: e-wallet-app/modules/account/accountrepo (interfaces: AccountStore)

// Package mockaccountstore is a generated GoMock package.
package mockaccountstore

import (
	context "context"
	db "e-wallet-app/db/sqlc"
	accountmodel "e-wallet-app/modules/account/accountmodel"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAccountStore is a mock of AccountStore interface.
type MockAccountStore struct {
	ctrl     *gomock.Controller
	recorder *MockAccountStoreMockRecorder
}

// MockAccountStoreMockRecorder is the mock recorder for MockAccountStore.
type MockAccountStoreMockRecorder struct {
	mock *MockAccountStore
}

// NewMockAccountStore creates a new mock instance.
func NewMockAccountStore(ctrl *gomock.Controller) *MockAccountStore {
	mock := &MockAccountStore{ctrl: ctrl}
	mock.recorder = &MockAccountStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountStore) EXPECT() *MockAccountStoreMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAccountStore) Create(arg0 context.Context, arg1 *accountmodel.CreateAccountRequest) (*db.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*db.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockAccountStoreMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAccountStore)(nil).Create), arg0, arg1)
}

// GetById mocks base method.
func (m *MockAccountStore) GetById(arg0 context.Context, arg1 *accountmodel.GetAccountRequest) (*db.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", arg0, arg1)
	ret0, _ := ret[0].(*db.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockAccountStoreMockRecorder) GetById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockAccountStore)(nil).GetById), arg0, arg1)
}

// List mocks base method.
func (m *MockAccountStore) List(arg0 context.Context, arg1 *accountmodel.ListAccountRequest) ([]db.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]db.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockAccountStoreMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockAccountStore)(nil).List), arg0, arg1)
}

// Transfer mocks base method.
func (m *MockAccountStore) Transfer(arg0 context.Context, arg1 *accountmodel.TransferAccountRequest) (*accountmodel.TransferAccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transfer", arg0, arg1)
	ret0, _ := ret[0].(*accountmodel.TransferAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Transfer indicates an expected call of Transfer.
func (mr *MockAccountStoreMockRecorder) Transfer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transfer", reflect.TypeOf((*MockAccountStore)(nil).Transfer), arg0, arg1)
}
