// Code generated by "enumer -type=AccountType -json -sql -transform=snake-upper -output=account_type_enumer.go"; DO NOT EDIT.

package accountenum

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strings"
)

const _AccountTypeName = "CHECKING_ACCOUNTSAVINGS_ACCOUNTCD_ACCOUNTIRA_ACCOUNTBROKERAGE_ACCOUNT"

var _AccountTypeIndex = [...]uint8{0, 16, 31, 41, 52, 69}

const _AccountTypeLowerName = "checking_accountsavings_accountcd_accountira_accountbrokerage_account"

func (i AccountType) String() string {
	i -= 1
	if i < 0 || i >= AccountType(len(_AccountTypeIndex)-1) {
		return fmt.Sprintf("AccountType(%d)", i+1)
	}
	return _AccountTypeName[_AccountTypeIndex[i]:_AccountTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _AccountTypeNoOp() {
	var x [1]struct{}
	_ = x[CheckingAccount-(1)]
	_ = x[SavingsAccount-(2)]
	_ = x[CDAccount-(3)]
	_ = x[IRAAccount-(4)]
	_ = x[BrokerageAccount-(5)]
}

var _AccountTypeValues = []AccountType{CheckingAccount, SavingsAccount, CDAccount, IRAAccount, BrokerageAccount}

var _AccountTypeNameToValueMap = map[string]AccountType{
	_AccountTypeName[0:16]:       CheckingAccount,
	_AccountTypeLowerName[0:16]:  CheckingAccount,
	_AccountTypeName[16:31]:      SavingsAccount,
	_AccountTypeLowerName[16:31]: SavingsAccount,
	_AccountTypeName[31:41]:      CDAccount,
	_AccountTypeLowerName[31:41]: CDAccount,
	_AccountTypeName[41:52]:      IRAAccount,
	_AccountTypeLowerName[41:52]: IRAAccount,
	_AccountTypeName[52:69]:      BrokerageAccount,
	_AccountTypeLowerName[52:69]: BrokerageAccount,
}

var _AccountTypeNames = []string{
	_AccountTypeName[0:16],
	_AccountTypeName[16:31],
	_AccountTypeName[31:41],
	_AccountTypeName[41:52],
	_AccountTypeName[52:69],
}

// AccountTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func AccountTypeString(s string) (AccountType, error) {
	if val, ok := _AccountTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _AccountTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to AccountType values", s)
}

// AccountTypeValues returns all values of the enum
func AccountTypeValues() []AccountType {
	return _AccountTypeValues
}

// AccountTypeStrings returns a slice of all String values of the enum
func AccountTypeStrings() []string {
	strs := make([]string, len(_AccountTypeNames))
	copy(strs, _AccountTypeNames)
	return strs
}

// IsAAccountType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i AccountType) IsAAccountType() bool {
	for _, v := range _AccountTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for AccountType
func (i AccountType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for AccountType
func (i *AccountType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("AccountType should be a string, got %s", data)
	}

	var err error
	*i, err = AccountTypeString(s)
	return err
}

func (i AccountType) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *AccountType) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of AccountType: %[1]T(%[1]v)", value)
	}

	val, err := AccountTypeString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
